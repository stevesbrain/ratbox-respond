                       Oper Challenge and Response System

   $Id: challenge.txt 21353 2005-12-12 18:56:58Z androsyn $

   Copyright (C) 2001 by ircd-hybrid team
   Copyright (C) 2005 Aaaron Sethman <androsyn@ratbox.org>

     ----------------------------------------------------------------------

   ircd-ratbox

   In an effort to reduce the damage caused to a network by a hacked O-line,
   ircd-ratbox supports a public-key based challenge-response system. This new
   system allows the admin to remove all oper block passwords from the conf
   file. Authentication is done through a public/private key.

   BIG FAT WARNING:
   
   This document only covers the CHALLENGE system in ircd-ratbox 3.0beta. 
   For the previous version of this system, please see the challenge.txt 
   in older releases of ircd-ratbox.  The challenge system described here
   and the respond tools are NOT compatible with the prior versions.

     ----------------------------------------------------------------------

                                  Requirements

   The ircd must be compiled with the --enable-openssl option to configure .
   If configure detects a working openssl library, --enable-openssl is
   implicitly enabled.

   oper {} blocks should not have normal passwords, but should contain the
   the name of the private key file. However it is possible for the user to
   use both challenge and normal passwords, but this would defeat the purpose
   of the challenge system.

   The oper has their private key file and an implementation of the RSA
   Respond tool available to be run.

     ----------------------------------------------------------------------

                                    Process

   Each oper should have a private key file and a public key file. The keys
   can be generated with the mkkeypair utility provided in tools/. 

   The oper keeps their private key file in a safe place, and gives their
   public key file to their admin(s).

   The admin will place an entry for the public key file into a field called
   rsa_public_key_file of each oper's oper {} block in the conf file.

   The oper wishes to obtain their operator status, and issues the CHALLENGE
   command.

   The server will print out a base64 encode challenge string, that needs to 
   be fed to the respond utility provided in tools/rsa_respond.

   The respond program will generate an answer that is fed back to the
   CHALLENGE command.

     ----------------------------------------------------------------------

                            Generating the Key Files

   The keys can be generated with the openssl command as follows:

       openssl genrsa -aes256(1) -out rsa.key 1024(2)
       openssl rsa -in rsa.key -pubout -out rsa.pub
   

   (1)
           The -aes256 must be included in order to create a key with a
           passphrase. Omitting this option will create a non protected key.
           If your version of openssl does not have AES support, use -des3
	   instead.

   (2)
	   With the previous implementation of challenge, 1024 was a hard
	   limit for key sizes, this is no longer the case and will accept
	   any valid RSA key size.

   It is highly recommended that you set a password on your private key.

   The tools/mkkeypair utility cannot be used to create a key suitable for
   use in CHALLENGE.

     ----------------------------------------------------------------------

                          Using CHALLENGE and respond

     Note: All examples assume the use of the stock respond client included
     with the ircd-ratbox sources.

   The administrator of the server you oper on should remove the password in
   your oper {} block and replace it with an entry for your public key, so
   that /oper will be disabled.

     Note: The public key is a VERY long string.

   The oper will issue /challenge oper_nick, and see something like below:

*** hgAyfCsMiA1hRxN8LmErwgL6VpqBc9IRAO/t6NTwCHqjqBqilQ
*** gO3tUByEe8GtpLizX/BnswJ10rnmwsbPjS9l0dbPvJqk9+SqsG
*** 7AbB0cjltEvwo0kCXSJiU6ki2D3UM5JRtERDvzd1XfuM0gNo5W
*** BJk5nW/RPSv2qxtnw1t0ajPm9y/NQxiaFf5gM0t0gYDYs3oGFW
*** DQ7CQ7BmcZHHeHRSFO8YweeDoLSJSsZQPUGwHMrn6VdfovClXk
*** m9oRnBlELEDyHtLuGbn5Dfk3PU+YgubepccTyraP5pqarVb/e8
*** D3ekwOVrNp1Yhk09sjGG3U1kV2sTYBK2w40yvv2OwA==
*** End of CHALLENGE



     Note: With some clients, the oper will have to issue /quote CHALLENGE
     instead of /challenge.

   The oper will then have to feed that challenge to the respond program.
   When running from an interactive session respond expects to receive
   the challenge text from standard input. Note that when entering text 
   from standard input, you must tell response that you are finished by
   hitting ctrl-d when complete.

   The following example assumes that private.key is encrypted:

$ ./respond private.key
Enter passphrase for private key:
Please paste challenge text now
hgAyfCsMiA1hRxN8LmErwgL6VpqBc9IRAO/t6NTwCHqjqBqilQ
gO3tUByEe8GtpLizX/BnswJ10rnmwsbPjS9l0dbPvJqk9+SqsG
7AbB0cjltEvwo0kCXSJiU6ki2D3UM5JRtERDvzd1XfuM0gNo5W
BJk5nW/RPSv2qxtnw1t0ajPm9y/NQxiaFf5gM0t0gYDYs3oGFW
DQ7CQ7BmcZHHeHRSFO8YweeDoLSJSsZQPUGwHMrn6VdfovClXk
m9oRnBlELEDyHtLuGbn5Dfk3PU+YgubepccTyraP5pqarVb/e8
D3ekwOVrNp1Yhk09sjGG3U1kV2sTYBK2w40yvv2OwA==

Response: /quote CHALLENGE +YRv9l8HEiV4YwEiYY2UWYlWag0S5BTzS70ZvDfAh2EA=


For the purposes scripting respond can also function non-interactively.
When operating in this mode, respond expects that the first line it receives
is a passphrase for the private.key.  Note that this line *must* be there
regardless of whether or not the private.key has a password on it or not. 
Simply sending an empty line should be sufficient for this.  Afterwards
the challenge text should be included.  Below is an example of calling
respond in this fashion:


echo 'thisisnotapassword
hgAyfCsMiA1hRxN8LmErwgL6VpqBc9IRAO/t6NTwCHqjqBqilQ
gO3tUByEe8GtpLizX/BnswJ10rnmwsbPjS9l0dbPvJqk9+SqsG
7AbB0cjltEvwo0kCXSJiU6ki2D3UM5JRtERDvzd1XfuM0gNo5W
BJk5nW/RPSv2qxtnw1t0ajPm9y/NQxiaFf5gM0t0gYDYs3oGFW
DQ7CQ7BmcZHHeHRSFO8YweeDoLSJSsZQPUGwHMrn6VdfovClXk
m9oRnBlELEDyHtLuGbn5Dfk3PU+YgubepccTyraP5pqarVb/e8
D3ekwOVrNp1Yhk09sjGG3U1kV2sTYBK2w40yvv2OwA==' | ./respond private.key
YRv9l8HEiV4YwEiYY2UWYlWag0S5BTzS70ZvDfAh2EA=



     ----------------------------------------------------------------------

                                RSA Respond Tool

   The RSA Respond tool is a vital part of challenge/response system. In
   order to function, the operator must have must have a way to quickly issue
   the respond command, and to copy and paste data to and from the IRC
   client.

   The respond source code is included with the Hybrid 7 source, in the
   tools/rsa_respond directory. A distributable tar file can easily be
   created by issuing make rsa_respond in the root of the source tree. The
   file rsa_respond.tar.gz will be created in the root of the source tree.

   rsa_respond.tar.gz should compile with little or no modifications[1] on
   most UNIX(c) and UNIX-like platforms[2]. The README in the tar archive
   gives more information.

   A copy of the source tar file is available on
   http://ircd.botbay.net/pub/hybrid/rsa/rsa_respond.tar.gz.

   For Windows platforms, there are two available RSA Respond tools. One is a
   text only port of the stock tool. The binary is available from
   http://ircd.botbay.net/pub/hybrid/rsa/rsa_respond-bin.tar.gz. The other
   tool is a GUI enabled version[3]. The source tree[4] is available from
   http://ircd.botbay.net/pub/hybrid/rsa/winrespond-src.tar.gz. A binary
   distribution is available from
   http://ircd.botbay.net/pub/hybrid/rsa/winrespond-bin.tar.gz.

   With the appropriate version of the RSA Respond tool, any operator can
   protect their privileged access to the server, with little additional
   effort over using standard operator passwords.

     ----------------------------------------------------------------------

                                    Benefits

   The greatest benefit of using the challenge/response system is that there
   are no passwords sent over the network in plaintext. There are also no
   credentials left on the server side, as only public keys are kept in the
   conf. The use of public/private key encryption provides far greater
   security over having a single password, and may (if the key is kept
   secure, and has a good passphrase) virtually eliminate hacked O-lines.

     ----------------------------------------------------------------------

                                    Numerics

 :server 381 user :You have entered... the Twilight Zone!.
 :server 740 user :challenge-text
 :server 740 user :challenge-text1
 :server 740 user :challenge-text2
 :server 741 user :End of CHALLENGE
 :server 464 user :Password Incorrect
 :server 491 user :Only few of mere mortals may try to enter the twilight zone
   

     Note: The text used can be changed by the server administrator.

     ----------------------------------------------------------------------

                                 Method of Operation

   The challenge protocol described here works as follows:


   1.  The server enerates 32 bytes of pseudo-random data using RAND_bytes()
       or RAND_pseudo_bytes().

   2.  The server encrypts this data with the operators public key and then
       base64 encodes the data.  This is the CHALLENGE string that the
       operator receives.

   3.  The operator receives the CHALLENGE data, decrypts the data with his
       private key.

   4.  The respond client generates a response to the CHALLENGE by doing an
       SHA256 hash on the decrypted data and base64 encodes it.  This is
       the response the operator sends back to the server.

   5.  The server checks to see if the SHA256 hash sent back from the
       operator matches the hash of the data the server sent, if it matches
       the server gives the operator status.  If it does not match, the
       server returns password mismatch and resets the CHALLENGE state for
       the operator
 


     ----------------------------------------------------------------------

  Notes

   [1] Some platforms may require Makefile changes in order to link in the    
       OpenSSL library. This may change in the future.                        
   [2] Platforms known to function include: Linux, FreeBSD, Solaris, and      
       Cygwin.                                                                
   [3] A screenshot of the program is available on                            
       http://kabel.pp.ru/sgml/winrespond.png .                               
   [4] The winrespond source depends on a working, up to date, Cygwin         
       installation.                                                          
